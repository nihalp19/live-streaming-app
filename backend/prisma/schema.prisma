// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String    // Hashed only
  name         String?
  avatar       String?   // URL to image
  role         Role      @default(USER)
  isVerified   Boolean   @default(false)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Password reset fields
  resetToken        String?
  resetTokenExpiry  DateTime?

  // Email verification
  verifyToken       String?
  verifyTokenExpiry DateTime?

  // ðŸ‘‡ Relations
  streams   Stream[]   // one user can have many streams
  viewers   Viewer[]   // one user can view many streams

  @@map("users")
}

enum Role {
  USER
  ADMIN
  STREAMER
}

model Stream {
  id           String     @id @default(uuid())
  title        String
  description  String?
  isLive       Boolean    @default(false)
  thumbnail    String?    // S3/Cloudinary URL
  rtmpUrl      String     // rtmp://yourserver/live
  streamKey    String     @unique // Auto-generated secret
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  viewers      Viewer[]   // Track viewers
  startedAt    DateTime?
  endedAt      DateTime?
  createdAt    DateTime   @default(now())
}

model Viewer {
  id        String   @id @default(uuid())
  streamId  String
  stream    Stream   @relation(fields: [streamId], references: [id])
  userId    String?  
  user      User?    @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())
}
